setwd("~/Repositorios/seek-the-unicorn-simulation")
source("MODELpred.R")
fitModels2Data <- function(args) {
Trials <- 5
parametros <- list(rep(0, 11), rep(0, 11), rep(0, 11))
devs <- c(100000, 100000, 100000)
print("Fitting MBiases...")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting FRA...")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb", contador, FALSE)
print("--------------")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
parametros[[1]] <- c('MBiases', f_MBi$par, rep(0,6))
devs[1] <- f_MBi$value
}, error = function(e) {
print("Optimizer didn't work for MBiases")
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
parametros[[2]] <- c('WSLS', f_WSLS$par, rep(0,3))
devs[2] <- f_WSLS$value
}, error = function(e) {
print("Optimizer didn't work for WSLS")
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
parametros[[3]] <- c('FRA', f_FRA$par)
devs[3] <- f_FRA$value
}, error = function(e) {
print("Optimizer didn't work for FRA")
})
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Model', 'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta')
data$dev <- devs
return(data)
} # end fitModels2Data
archivo <- "./Data/humans_tolerance0.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
print("Data prepared!")
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=2, module="nmkb", contador, FALSE)
print(f_WSLS)
fitdata <- fitModels2Data(args)
write.csv(fitdata, './Data/parameter_fit_humans.csv', row.names=FALSE)
source("MODELpred.R")
fitModels2Data <- function(args) {
Trials <- 5
parametros <- list(rep(0, 11), rep(0, 11), rep(0, 11))
devs <- c(100000, 100000, 100000)
print("Fitting MBiases...")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting FRA...")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb", contador, FALSE)
print("--------------")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
parametros[[1]] <- c('MBiases', f_MBi$par, rep(0,6))
devs[1] <- f_MBi$value
}, error = function(e) {
print("Optimizer didn't work for MBiases")
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
parametros[[2]] <- c('WSLS', f_WSLS$par, rep(0,3))
devs[2] <- f_WSLS$value
}, error = function(e) {
print("Optimizer didn't work for WSLS")
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
parametros[[3]] <- c('FRA', f_FRA$par)
devs[3] <- f_FRA$value
}, error = function(e) {
print("Optimizer didn't work for FRA")
})
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Model', 'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta')
data$dev <- devs
return(data)
} # end fitModels2Data
archivo <- "./Data/humans_tolerance0.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
print("Data prepared!")
fitdata <- fitModels2Data(args)
write.csv(fitdata, './Data/parameter_fit_humans.csv', row.names=FALSE)
source("MODELpred.R")
fitModels2Data <- function(args) {
Trials <- 5
parametros <- list(rep(0, 11), rep(0, 11), rep(0, 11))
devs <- c(100000, 100000, 100000)
print("Fitting MBiases...")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting FRA...")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb", contador, FALSE)
print("--------------")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
parametros[[1]] <- c('MBiases', f_MBi$par, rep(0,6))
devs[1] <- f_MBi$value
}, error = function(e) {
print("Optimizer didn't work for MBiases")
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
parametros[[2]] <- c('WSLS', f_WSLS$par, rep(0,3))
devs[2] <- f_WSLS$value
}, error = function(e) {
print("Optimizer didn't work for WSLS")
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
parametros[[3]] <- c('FRA', f_FRA$par)
devs[3] <- f_FRA$value
}, error = function(e) {
print("Optimizer didn't work for FRA")
})
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Model', 'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta')
data$dev <- devs
return(data)
} # end fitModels2Data
archivo <- "./Data/humans_tolerance0.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
archivo <- "./Data/humans_only_absent.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
print("Data prepared!")
fitdata <- fitModels2Data(args)
write.csv(fitdata, './Data/parameter_fit_humans.csv', row.names=FALSE)
source("MODELpred.R")
fitModels2Data <- function(args) {
Trials <- 5
parametros <- list(rep(0, 11), rep(0, 11), rep(0, 11))
devs <- c(100000, 100000, 100000)
print("Fitting MBiases...")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting FRA...")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb", contador, FALSE)
print("--------------")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
parametros[[1]] <- c('MBiases', f_MBi$par, rep(0,6))
devs[1] <- f_MBi$value
}, error = function(e) {
print("Optimizer didn't work for MBiases")
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
parametros[[2]] <- c('WSLS', f_WSLS$par, rep(0,3))
devs[2] <- f_WSLS$value
}, error = function(e) {
print("Optimizer didn't work for WSLS")
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
parametros[[3]] <- c('FRA', f_FRA$par)
devs[3] <- f_FRA$value
}, error = function(e) {
print("Optimizer didn't work for FRA")
})
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Model', 'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta')
data$dev <- devs
return(data)
} # end fitModels2Data
archivo <- "./Data/humans_only_absent.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
print("Data prepared!")
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=2, module="nmkb", contador, FALSE)
print(f_WSLS)
fitdata <- fitModels2Data(args)
write.csv(fitdata, './Data/parameter_fit_humans.csv', row.names=FALSE)
library(ggplot2)
df1 = read.csv("../Data/humans_only_absent.csv")
setwd("~/Repositorios/SODCL/R")
df1 = read.csv("../Data/humans_only_absent.csv")
df1 <- df1[complete.cases(df1), ]
# Regressing Consistency(n) w.r.t. Score(n-1)
model1h <- lm(Consistency ~ Score_LAG1, data = df1)
summary(model1h) # => Positive correlation is significant
g1 <- ggplot(df1, aes(Score_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
theme_bw() +
xlab("Score(n-1)") +
ylab("Consistency(n)") +
geom_smooth(method = lm)
g1
library(sjmisc)
library(sjmisc)
library(ggplot2)
df1 = read.csv("../Data/humans_only_absent.csv")
df1 <- df1[complete.cases(df1), ]
# Regressing Consistency w.r.t. max similarity to focal region
model4h <- lm(Consistency ~ Similarity_LAG1, data = df1)
summary(model4h) # => Positive correlation is significant
g3 <- ggplot(df1, aes(Similarity_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
xlab("Log of max similarity w.r.t.\nfocal regions on Round n-1") +
ylab("Consistency on Round n") +
geom_smooth(method = lm)
g3 <- g3 + theme_sjplot()
g3
df1 = read.csv("../Data/humans_only_absent.csv")
df1 <- df1[complete.cases(df1), ]
# Regressing Consistency w.r.t. max similarity to focal region
model4h <- lm(Consistency ~ Similarity_LAG1, data = df1)
summary(model4h) # => Positive correlation is significant
g3 <- ggplot(df1, aes(Similarity_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
xlab("Log of max similarity w.r.t.\nfocal regions on Round n-1") +
ylab("Consistency on Round n") +
geom_smooth(method = lm)
g3 <- g3 + theme_sjplot()
g3
g3 <- ggplot(df1, aes(Similarity_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
xlab("Max similarity w.r.t.\nfocal regions on Round n-1") +
ylab("Consistency on Round n") +
geom_smooth(method = lm)
g3 <- g3 + theme_sjplot()
g3
setwd("~/Repositorios/SODCL/R")
source("Model_Plots.R")
source("Model_Plots.R")
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
View(df1)
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
View(df1)
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
View(df1)
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
archivo <- "../Data/MBiases_simulated.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS_simulated.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA_simulated.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
ggsave("3models.pdf", width=5, height=4, dpi=1200, p)
setwd("~/Repositorios/seek-the-unicorn-simulation")
source("MODELpred.R")
fitModels2Data <- function(args) {
Trials <- 20
parametros <- list(rep(0, 11), rep(0, 11), rep(0, 11))
devs <- c(100000, 100000, 100000)
print("Fitting MBiases...")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb", contador, FALSE)
print("Fitting FRA...")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb", contador, FALSE)
print("--------------")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
parametros[[1]] <- c('MBiases', f_MBi$par, rep(0,6))
devs[1] <- f_MBi$value
}, error = function(e) {
print("Optimizer didn't work for MBiases")
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
parametros[[2]] <- c('WSLS', f_WSLS$par, rep(0,3))
devs[2] <- f_WSLS$value
}, error = function(e) {
print("Optimizer didn't work for WSLS")
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
parametros[[3]] <- c('FRA', f_FRA$par)
devs[3] <- f_FRA$value
}, error = function(e) {
print("Optimizer didn't work for FRA")
})
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Model', 'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta')
data$dev <- devs
return(data)
} # end fitModels2Data
archivo <- "./Data/humans_only_absent.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
print("Data prepared!")
fitdata <- fitModels2Data(args)
write.csv(fitdata, './Data/parameter_fit_humans.csv', row.names=FALSE)
